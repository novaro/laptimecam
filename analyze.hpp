/* 
 * laptimecam
 * Copyright (C) 2015 Mikko Novaro
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#ifndef ANALYZE__HPP
#define ANALYZE__HPP

#include "frame.hpp"
#include "common.hpp"
#include "types.hpp"

class MotionDetector
{
	public:
		MotionDetector ( double trigger_threshold, uint8_t ignore_threshold, bool update_max = false, double max_period_sec = 0.0 );
		/**
		 * \param[in] outq Can be NULL for learning trigger limit.
		 */
		void consumeFrames ( ThreadControl* tc, frame_queue* inq, frame_queue* outq );
		double getMaxChange ( void ) { return m_maxChange; }
	private:
		double m_triggerThreshold;
		/**
		 * Per pixel Y component differences under this value are ignored.
		 *
		 * To filter out some noise? May not be useful at all? Or maybe in a
		 * low light situation with more noise from the sensor?
		 *
		 * ==> seems to work well in filtering out noise generated by the
		 * camera (low value i.e. 10 already has a noticeable effect).
		 */
		uint8_t m_ignoreThreshold;
		/* for learning trigger limit */
		bool m_updateMax;
		double m_maxPeriodSec;
		double m_maxChange;
		std::list<std::pair<my_clock::time_point,double>> m_changeLog;
};

#endif
